/*
 * MiMoAPIView.java
 */

package com.mimo.service.example;




import com.mimo.service.api.MimoAPI;
import com.sun.org.apache.xerces.internal.impl.dv.util.Base64;
import org.jdesktop.application.Action;
import org.jdesktop.application.ResourceMap;
import org.jdesktop.application.SingleFrameApplication;
import org.jdesktop.application.FrameView;
import org.jdesktop.application.TaskMonitor;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.net.URL;
import java.net.URLConnection;
import javax.net.ssl.HttpsURLConnection;
import javax.swing.Timer;
import javax.swing.Icon;
import javax.swing.JDialog;
import javax.swing.JFrame;
import org.json.JSONObject;

/**
 * The application's main frame.
 */
public class MiMoAPIView extends FrameView
{
    String access_token = "";
    String m_tempCode = "OIVjtRFPZ6A";
    String m_tempSearchByName = "alus";
    String m_tempNotes = "test";
    int m_tempAmount = 100;

    public MiMoAPIView(SingleFrameApplication app)
    {
        super(app);
        
        initComponents();

        // status bar initialization - message timeout, idle icon and busy animation, etc
        ResourceMap resourceMap = getResourceMap();
        int messageTimeout = resourceMap.getInteger("StatusBar.messageTimeout");
        messageTimer = new Timer(messageTimeout, new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                statusMessageLabel.setText("");
            }
        });
        messageTimer.setRepeats(false);
        int busyAnimationRate = resourceMap.getInteger("StatusBar.busyAnimationRate");
        for (int i = 0; i < busyIcons.length; i++) {
            busyIcons[i] = resourceMap.getIcon("StatusBar.busyIcons[" + i + "]");
        }
        busyIconTimer = new Timer(busyAnimationRate, new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                busyIconIndex = (busyIconIndex + 1) % busyIcons.length;
                statusAnimationLabel.setIcon(busyIcons[busyIconIndex]);
            }
        });
        idleIcon = resourceMap.getIcon("StatusBar.idleIcon");
        statusAnimationLabel.setIcon(idleIcon);
        progressBar.setVisible(false);

        // connecting action tasks to status bar via TaskMonitor
        TaskMonitor taskMonitor = new TaskMonitor(getApplication().getContext());
        taskMonitor.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                String propertyName = evt.getPropertyName();
                if ("started".equals(propertyName)) {
                    if (!busyIconTimer.isRunning()) {
                        statusAnimationLabel.setIcon(busyIcons[0]);
                        busyIconIndex = 0;
                        busyIconTimer.start();
                    }
                    progressBar.setVisible(true);
                    progressBar.setIndeterminate(true);
                } else if ("done".equals(propertyName)) {
                    busyIconTimer.stop();
                    statusAnimationLabel.setIcon(idleIcon);
                    progressBar.setVisible(false);
                    progressBar.setValue(0);
                } else if ("message".equals(propertyName)) {
                    String text = (String)(evt.getNewValue());
                    statusMessageLabel.setText((text == null) ? "" : text);
                    messageTimer.restart();
                } else if ("progress".equals(propertyName)) {
                    int value = (Integer)(evt.getNewValue());
                    progressBar.setVisible(true);
                    progressBar.setIndeterminate(false);
                    progressBar.setValue(value);
                }
            }
        });
    }

    @Action
    public void showAboutBox() {
        if (aboutBox == null) {
            JFrame mainFrame = MiMoAPIApp.getApplication().getMainFrame();
            aboutBox = new MiMoAPIAboutBox(mainFrame);
            aboutBox.setLocationRelativeTo(mainFrame);
        }
        MiMoAPIApp.getApplication().show(aboutBox);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mainPanel = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        menuBar = new javax.swing.JMenuBar();
        javax.swing.JMenu fileMenu = new javax.swing.JMenu();
        javax.swing.JMenuItem exitMenuItem = new javax.swing.JMenuItem();
        javax.swing.JMenu helpMenu = new javax.swing.JMenu();
        javax.swing.JMenuItem aboutMenuItem = new javax.swing.JMenuItem();
        statusPanel = new javax.swing.JPanel();
        javax.swing.JSeparator statusPanelSeparator = new javax.swing.JSeparator();
        statusMessageLabel = new javax.swing.JLabel();
        statusAnimationLabel = new javax.swing.JLabel();
        progressBar = new javax.swing.JProgressBar();

        mainPanel.setName("mainPanel"); // NOI18N

        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(com.mimo.service.example.MiMoAPIApp.class).getContext().getResourceMap(MiMoAPIView.class);
        jButton1.setText(resourceMap.getString("jButton1.text")); // NOI18N
        jButton1.setName("jButton1"); // NOI18N
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                getAccessToken(evt);
            }
        });

        jButton2.setText(resourceMap.getString("jButton2.text")); // NOI18N
        jButton2.setName("jButton2"); // NOI18N
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                getSearchUser(evt);
            }
        });

        jButton3.setText(resourceMap.getString("jButton3.text")); // NOI18N
        jButton3.setName("jButton3"); // NOI18N
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                getFundTrasfer(evt);
            }
        });

        javax.swing.GroupLayout mainPanelLayout = new javax.swing.GroupLayout(mainPanel);
        mainPanel.setLayout(mainPanelLayout);
        mainPanelLayout.setHorizontalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addGap(135, 135, 135)
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton3)
                    .addComponent(jButton2)
                    .addComponent(jButton1))
                .addContainerGap(164, Short.MAX_VALUE))
        );
        mainPanelLayout.setVerticalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addComponent(jButton1)
                .addGap(44, 44, 44)
                .addComponent(jButton2)
                .addGap(44, 44, 44)
                .addComponent(jButton3)
                .addContainerGap(73, Short.MAX_VALUE))
        );

        menuBar.setName("menuBar"); // NOI18N

        fileMenu.setText(resourceMap.getString("fileMenu.text")); // NOI18N
        fileMenu.setName("fileMenu"); // NOI18N

        javax.swing.ActionMap actionMap = org.jdesktop.application.Application.getInstance(com.mimo.service.example.MiMoAPIApp.class).getContext().getActionMap(MiMoAPIView.class, this);
        exitMenuItem.setAction(actionMap.get("quit")); // NOI18N
        exitMenuItem.setName("exitMenuItem"); // NOI18N
        fileMenu.add(exitMenuItem);

        menuBar.add(fileMenu);

        helpMenu.setText(resourceMap.getString("helpMenu.text")); // NOI18N
        helpMenu.setName("helpMenu"); // NOI18N

        aboutMenuItem.setAction(actionMap.get("showAboutBox")); // NOI18N
        aboutMenuItem.setName("aboutMenuItem"); // NOI18N
        helpMenu.add(aboutMenuItem);

        menuBar.add(helpMenu);

        statusPanel.setName("statusPanel"); // NOI18N

        statusPanelSeparator.setName("statusPanelSeparator"); // NOI18N

        statusMessageLabel.setName("statusMessageLabel"); // NOI18N

        statusAnimationLabel.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        statusAnimationLabel.setName("statusAnimationLabel"); // NOI18N

        progressBar.setName("progressBar"); // NOI18N

        javax.swing.GroupLayout statusPanelLayout = new javax.swing.GroupLayout(statusPanel);
        statusPanel.setLayout(statusPanelLayout);
        statusPanelLayout.setHorizontalGroup(
            statusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(statusPanelSeparator, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE)
            .addGroup(statusPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(statusMessageLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 230, Short.MAX_VALUE)
                .addComponent(progressBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(statusAnimationLabel)
                .addContainerGap())
        );
        statusPanelLayout.setVerticalGroup(
            statusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(statusPanelLayout.createSequentialGroup()
                .addComponent(statusPanelSeparator, javax.swing.GroupLayout.PREFERRED_SIZE, 2, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(statusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(statusMessageLabel)
                    .addComponent(statusAnimationLabel)
                    .addComponent(progressBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(3, 3, 3))
        );

        setComponent(mainPanel);
        setMenuBar(menuBar);
        setStatusBar(statusPanel);
    }// </editor-fold>//GEN-END:initComponents
/**
 * This method is used to get the access token.
 * @param evt
 */
    private void getAccessToken(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_getAccessToken
        URL url;
        URLConnection connection;
        HttpsURLConnection httpConn = null;
        InputStreamReader isr = null;
        BufferedReader in = null;
         try
         {
            String responseString = "";
            StringBuffer accessToekenResponse = new StringBuffer();
            String wsURL = MimoAPI.getAccessTokenRequestURL(m_tempCode);
            url = new URL(wsURL);
            connection = url.openConnection();
            httpConn = (HttpsURLConnection)connection;

            httpConn.setRequestMethod("POST");
            String authString = "mimo:mimo";
            String authStringEnc = Base64.encode(authString.getBytes());
            httpConn.addRequestProperty("Authorization", "Basic " + authStringEnc);

            httpConn.setDoOutput(true);
            httpConn.setDoInput(true);
           
            //Read the response.
            isr = new InputStreamReader(httpConn.getInputStream());
            in = new BufferedReader(isr);

            //Write the SOAP message response to a String.
            while ((responseString = in.readLine()) != null)
            {
                accessToekenResponse.append(responseString);
            }
            System.out.println("Access Token Response: " + accessToekenResponse.toString());
            if(accessToekenResponse != null)
            {
                JSONObject jsonAccessToken = new JSONObject(accessToekenResponse.toString());
               // System.out.println("jsonAccessToken====" + jsonAccessToken);
                if(!jsonAccessToken.isNull("access_token"))
                    access_token = jsonAccessToken.getString("access_token");
                MimoAPI.setAccessToken(access_token);
            }
         }
         catch(Exception e)
         {
             e.printStackTrace();
         }
        finally
        {
            try
            {
                if(httpConn != null)
                    httpConn.disconnect();
                if(isr != null)
                    isr.close();
                if(in != null)
                    in.close();
            }
            catch(Exception e)
            {
                e.printStackTrace();
            }
        }
}//GEN-LAST:event_getAccessToken
/**
 * This method is used to search the user list based on parameter like username, email, account number etc.
 * @param evt
 */
    private void getSearchUser(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_getSearchUser
       URL url;
       URLConnection connection;
       HttpsURLConnection httpConn = null;
       InputStreamReader isr = null;
       BufferedReader in = null;
      try
      {

        String responseString = "";
        String outputString = "";
        //System.out.println("access_token===" + access_token);
        String wsURL = MimoAPI.getSearchByUsernameRequestURL(m_tempSearchByName);
        url = new URL(wsURL);
        connection = url.openConnection();
        httpConn = (HttpsURLConnection)connection;

        httpConn.setRequestMethod("GET");

		String authString = "mimo:mimo";
		String authStringEnc = Base64.encode(authString.getBytes());
		httpConn.addRequestProperty("Authorization", "Basic " + authStringEnc);

        httpConn.setDoOutput(true);
        httpConn.setDoInput(true);

        //Read the response.
        isr = new InputStreamReader(httpConn.getInputStream());
        in = new BufferedReader(isr);

        //Write the SOAP message response to a String.
        while ((responseString = in.readLine()) != null)
        {
            outputString = outputString + responseString;
        }
        System.out.println("Search User Detail: " + outputString);
      }
      catch(Exception e)
      {
          e.printStackTrace();
      }
      finally
      {
        try
        {
            if(httpConn != null)
                httpConn.disconnect();
            if(isr != null)
                isr.close();
            if(in != null)
                in.close();
        }
        catch(Exception e)
        {
            e.printStackTrace();
        }
     }
}//GEN-LAST:event_getSearchUser
/**
 * This method is used to transfer the money.
 * @param evt
 */
    private void getFundTrasfer(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_getFundTrasfer
       URL url;
       URLConnection connection;
       HttpsURLConnection httpConn = null;
       InputStreamReader isr = null;
       BufferedReader in = null;
       try
       {
        String responseString = "";
        String outputString = "";

        String wsURL = MimoAPI.getTransferRequestURL(m_tempNotes, m_tempAmount);
        url = new URL(wsURL);
        connection = url.openConnection();
        httpConn = (HttpsURLConnection)connection;

        httpConn.setRequestMethod("POST");

		String authString = "mimo:mimo";
		String authStringEnc = Base64.encode(authString.getBytes());
		httpConn.addRequestProperty("Authorization", "Basic " + authStringEnc);

        httpConn.setDoOutput(true);
        httpConn.setDoInput(true);
        //System.out.print("==httpConn===" + httpConn.getResponseCode());
        //Read the response.
        isr = new InputStreamReader(httpConn.getInputStream());
        in = new BufferedReader(isr);

        //Write the SOAP message response to a String.
        while ((responseString = in.readLine()) != null)
        {
            outputString = outputString + responseString;
        }
        System.out.println("For Fund Transfer: " + outputString);
       }
       catch(Exception e)
       {
           e.printStackTrace();
       }
       finally
       {
        try
        {
            if(httpConn != null)
                httpConn.disconnect();
            if(isr != null)
                isr.close();
            if(in != null)
                in.close();
        }
        catch(Exception e)
        {
            e.printStackTrace();
        }
      }
}//GEN-LAST:event_getFundTrasfer

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JProgressBar progressBar;
    private javax.swing.JLabel statusAnimationLabel;
    private javax.swing.JLabel statusMessageLabel;
    private javax.swing.JPanel statusPanel;
    // End of variables declaration//GEN-END:variables

    private final Timer messageTimer;
    private final Timer busyIconTimer;
    private final Icon idleIcon;
    private final Icon[] busyIcons = new Icon[15];
    private int busyIconIndex = 0;

    private JDialog aboutBox;
}
